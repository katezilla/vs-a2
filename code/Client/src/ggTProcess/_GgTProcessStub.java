package ggTProcess;


/**
* ggTProcess/_GgTProcessStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from GgTProcess.idl
* Montag, 4. Mai 2015 21:54 Uhr MESZ
*/

public class _GgTProcessStub extends org.omg.CORBA.portable.ObjectImpl implements ggTProcess.GgTProcess
{

  public void setStartwerte (String linkeProzessId, String rechteProzessId, int startwertMi, int delayZeit, String monitorId)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setStartwerte", true);
                $out.write_string (linkeProzessId);
                $out.write_string (rechteProzessId);
                $out.write_long (startwertMi);
                $out.write_long (delayZeit);
                $out.write_string (monitorId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setStartwerte (linkeProzessId, rechteProzessId, startwertMi, delayZeit, monitorId        );
            } finally {
                _releaseReply ($in);
            }
  } // setStartwerte

  public void rechnen (String prozessIdAbsender, int num)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("rechnen", true);
                $out.write_string (prozessIdAbsender);
                $out.write_long (num);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                rechnen (prozessIdAbsender, num        );
            } finally {
                _releaseReply ($in);
            }
  } // rechnen

  public void markerAuswerten (int seqNr, String prozessIdAbsender)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("markerAuswerten", true);
                $out.write_long (seqNr);
                $out.write_string (prozessIdAbsender);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                markerAuswerten (seqNr, prozessIdAbsender        );
            } finally {
                _releaseReply ($in);
            }
  } // markerAuswerten

  public void beenden (String prozessIdAbsender)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("beenden", true);
                $out.write_string (prozessIdAbsender);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                beenden (prozessIdAbsender        );
            } finally {
                _releaseReply ($in);
            }
  } // beenden

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:ggTProcess/GgTProcess:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _GgTProcessStub
