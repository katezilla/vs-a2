package koordinator;


/**
* koordinator/KoordinatorPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Koordinator.idl
* Montag, 4. Mai 2015 21:58 Uhr MESZ
*/

public abstract class KoordinatorPOA extends org.omg.PortableServer.Servant
 implements koordinator.KoordinatorOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("anmelden", new java.lang.Integer (0));
    _methods.put ("informieren", new java.lang.Integer (1));
    _methods.put ("getStarterIds", new java.lang.Integer (2));
    _methods.put ("berechnen", new java.lang.Integer (3));
    _methods.put ("beenden", new java.lang.Integer (4));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // koordinator/Koordinator/anmelden
       {
         int typId = in.read_long ();
         String prozessId = in.read_string ();
         this.anmelden (typId, prozessId);
         out = $rh.createReply();
         break;
       }

       case 1:  // koordinator/Koordinator/informieren
       {
         String prozessId = in.read_string ();
         int sequenzNr = in.read_long ();
         boolean termStatus = in.read_boolean ();
         int letzteZahl = in.read_long ();
         this.informieren (prozessId, sequenzNr, termStatus, letzteZahl);
         out = $rh.createReply();
         break;
       }

       case 2:  // koordinator/Koordinator/getStarterIds
       {
         String $result[] = null;
         $result = this.getStarterIds ();
         out = $rh.createReply();
         koordinator.ProzessIdsHelper.write (out, $result);
         break;
       }

       case 3:  // koordinator/Koordinator/berechnen
       {
         String monitorId = in.read_string ();
         int anzahlGgtLower = in.read_long ();
         int anzahlGgtUpper = in.read_long ();
         int delayZeitLower = in.read_long ();
         int delayZeitUpper = in.read_long ();
         int termAbfragePeriode = in.read_long ();
         int gewuenschterGgt = in.read_long ();
         this.berechnen (monitorId, anzahlGgtLower, anzahlGgtUpper, delayZeitLower, delayZeitUpper, termAbfragePeriode, gewuenschterGgt);
         out = $rh.createReply();
         break;
       }

       case 4:  // koordinator/Koordinator/beenden
       {
         String prozessIdAbsender = in.read_string ();
         this.beenden (prozessIdAbsender);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:koordinator/Koordinator:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Koordinator _this() 
  {
    return KoordinatorHelper.narrow(
    super._this_object());
  }

  public Koordinator _this(org.omg.CORBA.ORB orb) 
  {
    return KoordinatorHelper.narrow(
    super._this_object(orb));
  }


} // class KoordinatorPOA
